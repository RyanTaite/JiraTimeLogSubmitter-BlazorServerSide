@page "/"

@using JiraWorklogSubmitter.Config
@using JiraWorklogSubmitter.Data
@using JiraWorklogSubmitter.Services.Interfaces
@using Microsoft.Extensions.Options
@using System.Text.RegularExpressions
@inject ITimeEntryService TimeEntryService
@inject IOptions<JiraSettings> JiraSettings

<h1>JIRA Time Log</h1>

<p>Create Time Entries and then submit them</p>

@if (_jiraWorklogEntries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="_jiraWorklogEntries" OnValidSubmit="HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <button type="button" class="btn btn-secondary" @onclick="AddNewTimeEntry">
            <i class="oi oi-plus"></i>
            &nbsp;Add New Worklog Entry
        </button>
        <button type="submit" class="btn btn-primary">
            <i class="oi oi-cloud-upload"></i>
            &nbsp;Submit to Jira
        </button>
        <div class="row">
            <div class="col col-12">
                <table id="worklongEntryTable" class="table table-sm table-responsive-sm table-responsive-md table-hover table-striped w-auto">
                    <thead>
                        <tr>
                            <th id="worklongEntryTableTicketColumn">Ticket</th>
                            <th id="worklongEntryTableTicketColumn">Summary</th>
                            <th id="worklongEntryTableTimeSpentColumn">Time Spent</th>
                            <th id="worklongEntryTableCommentColumn">Comment</th>
                            <th id="worklongEntryTableRemoveColumn"></th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var jiraWorklogEntry in _jiraWorklogEntries)
                    {
                        <tr>
                            <td>
                                <input value="@jiraWorklogEntry.Ticket" placeholder="CTS-302" @onchange="@(async e =>
                                                                                                           {
                                                                                                               jiraWorklogEntry.Ticket = e.Value.ToString();
                                                                                                               await GetJiraTicketSummaryAsync(jiraWorklogEntry);
                                                                                                           })" />
                            </td>
                            <td>
                                <InputText @bind-Value="jiraWorklogEntry.Summary" readonly disabled placeholder="Summary" tabindex="-1" />
                            </td>
                            <td>
                                <input value="@jiraWorklogEntry.TimeSpent" placeholder="1d 2h 3m" @onchange="@(e =>
                                                                                                               {
                                                                                                                   jiraWorklogEntry.TimeSpent = e.Value.ToString();
                                                                                                                   UpdateTotalTime();
                                                                                                               })" />
                            </td>
                            <td style="display:flex; align-items: stretch; flex: 0 0 50%;">
                                <InputTextArea @bind-Value="jiraWorklogEntry.Comment" placeholder="Fixed things" spellcheck="true" />
                            </td>
                            <td>
                                <button type="button"
                                        class="btn btn-danger"
                                        tabindex="-1"
                                        @onclick="@(e =>
                                                    {
                                                        DeleteEntry(jiraWorklogEntry);
                                                        UpdateTotalTime();
                                                    })">
                                    <i class="oi oi-circle-x"></i>
                                    &nbsp;Remove
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td></td>
                            <td></td>
                            <td>
                                <InputText @bind-Value="_totalTimeSpent" readonly disabled tabindex="-1" />
                            </td>
                            <td></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </EditForm>
}

@code {
    private readonly ICollection<JiraWorklogEntry> _jiraWorklogEntries = new List<JiraWorklogEntry>() { new JiraWorklogEntry() };
    private string _totalTimeSpent = string.Empty;

    protected override async Task OnInitializedAsync()
    {
    }

    private void AddNewTimeEntry()
    {
        var newTimeEntry = new JiraWorklogEntry();
        _jiraWorklogEntries.Add(newTimeEntry);
    }

    private async Task HandleValidSubmitAsync()
    {
        // I believe this is still being called, even when a JiraWorklogEntry has invalid data, because I'm working with a collection of objects rather than individual objects.
        // ".NET Core 3.1 Preview 2 introduces experimental support for object graph validation using data annotations" tells me that my list validation simply isn't supported yet.
        Console.WriteLine("Handling Valid Submit");
        await TimeEntryService.SubmitTimeLogAsync(_jiraWorklogEntries);
    }

    private void DeleteEntry(JiraWorklogEntry jiraWorklogEntry)
    {
        _jiraWorklogEntries.Remove(jiraWorklogEntry);
    }

    private async Task GetJiraTicketSummaryAsync(JiraWorklogEntry jiraWorklogEntry)
    {
        var result = await TimeEntryService.GetJiraTicketSummaryAsync(jiraWorklogEntry.Ticket);
        jiraWorklogEntry.Summary = result;
    }

    private void UpdateTotalTime()
    {
        //TODO: Need to handle the fact that 8h is considered 1d to Jira, so maybe manipulate the time span to show that? Might be company based though...

        const string patternDay = @"((?<day>\d+)\s?[dD])";
        const string patternHour = @"((?<hour>\d+)\s?[hH])";
        const string patternMinute = @"((?<minute>\d+)\s?[mM])";

        var patternCombined = $@"{patternDay}?\s?{patternHour}?\s?{patternMinute}?";

        var regex = new Regex(patternCombined);

        var allTimeStrings = _jiraWorklogEntries.Select(worklogEntry => worklogEntry.TimeSpent).ToList();
        var totalTimeSpan = new TimeSpan(); // Clear the current value since we are going to build a new one

        foreach (var timeString in allTimeStrings)
        {
            var match = regex.Match(timeString);
            if (match.Success)
            {
                int.TryParse(match.Groups["day"].Value, out var day);
                int.TryParse(match.Groups["hour"].Value, out var hour);
                int.TryParse(match.Groups["minute"].Value, out var minute);
                var newTimeSpan = new TimeSpan(day, hour, minute);
                totalTimeSpan = totalTimeSpan.Add(newTimeSpan);
            }
            else
            {
                Console.WriteLine($"No match on {timeString}");
            }
        }

        _totalTimeSpent = totalTimeSpan.ToString();
    }
}
